package com.lyeeedar.headless;

import com.sun.jna.*;
/**
 * JNA Wrapper for library <b>glsl_optimizer_lib</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface GlslOptimiser extends Library {
	public static final String JNA_LIBRARY_NAME = "glsl_optimizer_lib";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance( GlslOptimiser.JNA_LIBRARY_NAME );
	public static final GlslOptimiser INSTANCE = (GlslOptimiser) Native.load( GlslOptimiser.JNA_LIBRARY_NAME, GlslOptimiser.class );

	public static interface glslopt_shader_type {
		public static final int kGlslOptShaderVertex = 0;
		public static final int kGlslOptShaderFragment = 1;
	};

	public static interface glslopt_target {
		public static final int kGlslTargetOpenGL = 0;
		public static final int kGlslTargetOpenGLES20 = 1;
		public static final int kGlslTargetOpenGLES30 = 2;
		public static final int kGlslTargetMetal = 3;
	};

	GlslOptimiser.glslopt_ctx glslopt_initialize( int target );
	void glslopt_cleanup( GlslOptimiser.glslopt_ctx ctx );
	GlslOptimiser.glslopt_shader glslopt_optimize( GlslOptimiser.glslopt_ctx ctx, int type, String shaderSource, int options );
	String glslopt_get_output( GlslOptimiser.glslopt_shader shader );
	String glslopt_get_log( GlslOptimiser.glslopt_shader shader );
	void glslopt_shader_delete( GlslOptimiser.glslopt_shader shader );

	public static class glslopt_ctx extends PointerType {
		public glslopt_ctx(Pointer address) {
			super(address);
		}
		public glslopt_ctx() {
			super();
		}
	};

	public static class glslopt_shader extends PointerType {
		public glslopt_shader(Pointer address) {
			super(address);
		}
		public glslopt_shader() {
			super();
		}
	};
}
